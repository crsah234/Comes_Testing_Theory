ㅁ 테스팅의 원리 7가지

1. 테스팅은 결함이 있음을 밝히는 활동이다( 결함이 없음을 밝히는 것은 불가능.)
2. (exhaustive)완벽한 테스팅은 없다
3. (early testing)조기테스팅으로 시간과 비용을 절약할 수 있다
4. 결함은 집중된다
5. 살충제 패러독스에 유의하라
6. 테스팅은 정황에 의존적이다
7. 오류 부재는 궤변이다


2. (exhaustive)완벽한 테스팅은 없다
 - 시간과 비용은 한정적, 따라서 '리스크 분석'과 '결정된 우선순위'에 테스팅 집중

3. (early testing)조기테스팅으로 시간과 비용을 절약할 수 있다
 - 시간과 비용은 항상 같이 다닌다.

4. 결함은 집중된다
 - 적은 수의 모듈에서 대다수의 결함 발견
 - 신기술 적용시 생길 수 도 있음
 - 개발자의 능력에 따라 결함 발견
 
5. 살충제 패러독스에 유의하라
 - 동일한 테스트 반복시 버그찾기 힘듬
 - 테스트케이스 변경 및 경험기반 방법을 통해 다양화
 
6. 테스팅은 정황에 의존적이다
 - 같은 기능도 사용환경등에 따라 테스트 강도가 달라지기에(인원 등)
 
7. 오류 부재는 궤변이다
 - 요구사항을 만족하지 못하는 SW의 결함을 찾고 수정하는것은 무의미
 - 결함을 모두 발견했다해서 품질이 높아졌다고는 보기 힘듬. 요구사항 외의 것을 찾아도 무슨 의미가 있겠는가
 
 

ㅁ PDLC(product development life cycle) - 제품 개발 생명 주기
요구사항 분석 - 설계 - 프토토타입 - 코딩 - 테스트 - release(출하) < - > 유지&보수(모니터링이라고함)

ㅁ MSA 방법 
 - 각각의 서비스는 모듈화 되어있음( RPC, API등을 이용해 각 모듈끼리 통신)
 - 적절한 수준에서 기술 스택을 다르게 가져갈 수  있다.(java 기반이어도 api를 이용해 node.js로 연동할수있음)
 - 모듈화되어있기에, 각각 유지보수도 쉽게할 수 있다.
 
 ㅁ SW test 목적(신뢰도 직결)
 1. 결함 발견(오류 발견)
 2. 결함에 대한 예방
 3. 품질 수준 보증(자신감 획득)
 4. 출시가능한 근거 데이터 획득

ㅁ 종료조건이란?
 테스트를 종료하는 조건?
 
ㅁ 개발서버, 스테이징 환경, 운영 환경
 - 개발서버 & 스테이징 환경 : 같은 DB 사용
 - 스테이징 환경 & 운영 환경 : 같은 프론트 사용
 
ㅁ 이슈 VS 리스크 
 - 이슈 : 발생한 문제
 - 리스크 : 발생 가능성 있는 문제
   (리스크 = 가능성 * 영향력)
   (리스크 = 프로덕트 리스크 + 프로젝트 리스크)

ㅁ 테스팅 정의
 - 사용자의 기대수준 및 요구사항에 맞지않은 결함을 '정량적 수치'로 표현하여 결정권자에게 전하기

* 정량적 : 누구나 정확히 알 수 있는 수치적 표현
* 정성적 : 정량적의 반댓말. 은유법이라고 생각하기

ㅁ 용어 정리(error, defect, fault, incident, issue)
 - error(mistake) : 사람의 실수
 - defect : 오동작(related to product)
 - fault : 오동작(related to product)
 - incident : 오동작(related to product) 
 - issue : 오동작(related to product)
 - failure : 사고(accident, related to event)
 
  ㅇ 용어 조금더 세세히
   - error : 개발자에 의해 생성된 실수, defect 등 오작동의 원인
   - defect, fault(결함, 결점) : 문제를 일으키는 실제 원인
   - incident : 테스팅 중 결함, 개선사항 등 무언가 걸릴만 한 것들(문제가 될수 도 있는 모든 것들)
   - 

ㅁ 개발 계획 수행(QA 업무 순서?)
 * TEST BASIS : 개발산출물(개발단계에서 작성된 문서) 등, 분석 및 TC 작성이 필요한 모든 문서들
 - 계획 단계 : 개발산출물(기획서 등등) 을보고 공부 진행 - 이때 요구사항등을 확실히 분석해 놓는다
 - 설계 단계 : TC 작성(이 때 Test Coverage의 범위내에서 빠뜨리지않고 작성하기)
              - 많이 하는 실수는 기획서의 description 내용을 그대로 따라하는 행위. 하지말것
 - 수행 단계 : TC 수행

ㅁ TC 구성요소(실물은 엑셀파일 보기)
 - TestCaseID : 각 TC 고유 넘버
 - 기능적 분류 : 모든 기능적 부분은 모두 달라야함(같은 기능을 수행하는 TC는 없어야함)
 - 조건 : TC를 수행하기 위해 필요한 조건들
 - Step : TC 수행절차
 - 기대결과 : TC를 수행했을 때의 예상되는 결과, 기획서에 작성돼 있음

ㅁ 결함관리도구에서 결함의 상태
 1) OPEN : QA가 올린 결함
 2) Assign : PM이 담당자에게 결함을 할당
 3) 수정중 : 개발자가 수정중
 4) 해결됨 : 개발자가 수정됐다고 올림
 5) 완료 : 해결됨 상태를 QA가 완료로 수정
 - 만약 4)에서 테스트시 해결되지 못했다면 다시 2)로 넘어감

ㅁ 결함 우선 순위
 1) BLOCK : 막혀서 진행을 하지 못함
 2) Critical : crash, server 오류, 데이터 유실등
 3) major : 주요기능, 사용빈도가 높은 기능
 4) minor, 5) trivial : 주로 UI 영역


